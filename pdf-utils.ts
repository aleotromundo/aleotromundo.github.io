'use client'; // For pdf-lib usage and triggering downloadimport { PDFDocument, rgb, StandardFonts } from 'pdf-lib';import type { Plant } from './plant-types';import { saveAs } from 'file-saver'; // Ensure file-saver is installed or handle download differentlyasync function embedImageFromDataUri(pdfDoc: PDFDocument, dataUri: string, imageName: string = 'image') {  if (!dataUri || !dataUri.startsWith('data:image')) {    console.error(`URI de datos inválido o faltante para ${imageName}`);    throw new Error(`URI de datos inválido o faltante para ${imageName}. URI: ${dataUri ? dataUri.substring(0,100) + '...' : 'undefined'}`);  }  // Helper to remove data URI prefix e.g. data:image/png;base64,  const base64String = dataUri.substring(dataUri.indexOf(',') + 1);  if (!base64String) {    console.error(`Cadena base64 vacía para ${imageName} desde URI de datos: ${dataUri.substring(0,100)}...`);    throw new Error(`Cadena base64 vacía para ${imageName}`);  }    let imageBytes;  try {    imageBytes = Uint8Array.from(atob(base64String), c => c.charCodeAt(0));  } catch (e) {    console.error(`Error al decodificar cadena base64 para ${imageName}:`, e);    throw new Error(`Error al decodificar cadena base64 para ${imageName}.`);  }    if (dataUri.startsWith('data:image/jpeg') || dataUri.startsWith('data:image/jpg')) {    return await pdfDoc.embedJpg(imageBytes);  } else if (dataUri.startsWith('data:image/png')) {    return await pdfDoc.embedPng(imageBytes);  }  console.error(`Tipo de imagen no soportado para incrustación en PDF para ${imageName}. URI de datos: ${dataUri.substring(0,30)}... Solo se soportan JPEG y PNG.`);  throw new Error('Tipo de imagen no soportado para incrustación en PDF. Solo se soportan JPEG y PNG.');}export async function generatePlantCatalogPdf(plants: Plant[]): Promise<void> {  if (plants.length === 0) {    alert('No hay plantas para generar un catálogo.');    return;  }  const pdfDoc = await PDFDocument.create();  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);  const helveticaBoldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);  const drawFallbackBackground = (page: ReturnType<PDFDocument['addPage']>) => {    const { width, height } = page.getSize();    page.drawRectangle({      x: 0,      y: 0,      width,      height,      color: rgb(0.96, 0.96, 0.93), // Light beige fallback    });  };  for (const plant of plants) {    try {      const page = pdfDoc.addPage([612, 792]); // Standard US Letter size      const { width, height } = page.getSize();      // 1. AI Generated Background (if available)      if (plant.aiBackgroundDataUri) {        try {          const bgImage = await embedImageFromDataUri(pdfDoc, plant.aiBackgroundDataUri, `fondo de ${plant.name}`);          const bgDims = bgImage.scaleToFit(width, height);          page.drawImage(bgImage, {            x: (width - bgDims.width) / 2,            y: (height - bgDims.height) / 2,            width: bgDims.width,            height: bgDims.height,          });        } catch (e) {          console.error(`Error al incrustar fondo IA para ${plant.name}:`, e);          drawFallbackBackground(page);        }      } else {         drawFallbackBackground(page);      }      // 2. Plant Photo      let textStartY = height - 70; // Default start Y if no image      if (plant.photoDataUri) {        try {          const plantImage = await embedImageFromDataUri(pdfDoc, plant.photoDataUri, `foto de ${plant.name}`);          const plantImageMaxWidth = width * 0.6;          const plantImageMaxHeight = height * 0.4;          const plantImageDims = plantImage.scaleToFit(plantImageMaxWidth, plantImageMaxHeight);          page.drawImage(plantImage, {            x: (width - plantImageDims.width) / 2,            y: height - 50 - plantImageDims.height, // Position from top            width: plantImageDims.width,            height: plantImageDims.height,          });          textStartY = height - 50 - plantImageDims.height - 30;        } catch (e) {            console.error(`Error al incrustar foto de planta para ${plant.name}:`, e);        }      } else {        console.warn(`No hay photoDataUri para la planta: ${plant.name}`);      }            // 3. Plant Name      page.drawText(plant.name || "Planta sin Nombre", {        x: 50,        y: textStartY,        font: helveticaBoldFont,        size: 24,        color: rgb(0.1, 0.1, 0.1), // Dark gray      });      // 4. Plant Description      const description = plant.description || "No hay descripción disponible.";      const descriptionLines = [];      let currentLine = '';      const maxLineWidth = width - 100; // 50px margin on each side      const words = description.split(' ');      for (const word of words) {        const testLine = currentLine + (currentLine ? ' ' : '') + word;        const testLineWidth = helveticaFont.widthOfTextAtSize(testLine, 12);        if (testLineWidth < maxLineWidth) {          currentLine = testLine;        } else {          if (currentLine) descriptionLines.push(currentLine);          let currentWordPart = word;          while (helveticaFont.widthOfTextAtSize(currentWordPart, 12) >= maxLineWidth) {            let part = '';            for (let i = 0; i < currentWordPart.length; i++) {              if (helveticaFont.widthOfTextAtSize(part + currentWordPart[i], 12) >= maxLineWidth) {                break;              }              part += currentWordPart[i];            }            descriptionLines.push(part);            currentWordPart = currentWordPart.substring(part.length);          }          currentLine = currentWordPart;         }      }      if (currentLine) descriptionLines.push(currentLine);             let currentY = textStartY - 30;      for (const line of descriptionLines) {        if (currentY < 50) break;         page.drawText(line, {          x: 50,          y: currentY,          font: helveticaFont,          size: 12,          color: rgb(0.2, 0.2, 0.2),           lineHeight: 18,        });        currentY -= 18;      }    } catch (pageError) {        console.error(`Error procesando página para la planta ${plant.name}:`, pageError);    }  }  try {    const pdfBytes = await pdfDoc.save();    const blob = new Blob([pdfBytes], { type: 'application/pdf' });    saveAs(blob, 'PlantPal_Catalogo.pdf');  } catch (saveError) {    console.error("Error guardando PDF:", saveError);    alert("Error al guardar el catálogo PDF. Revisa la consola para más detalles.");  }}